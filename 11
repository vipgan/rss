import imaplib
import email
import requests
import re
import logging
from datetime import datetime
import pytz
from email.utils import parsedate_to_datetime
from telegram import Bot
from telegram.constants import ParseMode
from email.utils import parseaddr
import os
from dotenv import load_dotenv
import json
import hashlib
import asyncio
from bs4 import BeautifulSoup

# 设置日志记录并分级
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

# 加载 .env 文件
load_dotenv()

# 从环境变量获取配置信息
email_user = os.getenv("EMAIL_USER")
email_password = os.getenv("EMAIL_PASSWORD")
imap_server = os.getenv("IMAP_SERVER")

TELEGRAM_API_KEY = os.getenv("TELEGRAM_API_KEY")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# 初始化 Telegram Bot
bot = Bot(token=TELEGRAM_API_KEY)

# 获取邮件哈希值
def get_email_hash(msg):
    subject = clean_subject(decode_header(msg['subject']))
    body = get_email_body(msg)
    return hashlib.md5((subject + body).encode('utf-8')).hexdigest()

# 加载已发送的邮件记录
def load_sent_mail():
    try:
        with open('sent_mail.json', 'r', encoding='utf-8') as file:
            return set(json.load(file))
    except FileNotFoundError:
        logger.info("sent_mail.json 文件未找到，将创建一个新的。")
        with open('sent_mail.json', 'w', encoding='utf-8') as file:
            json.dump([], file)
        return set()
    except json.JSONDecodeError:
        logger.error("解析 sent_mail.json 中的 JSON 数据时出错。")
        return set()

# 批量保存已发送的邮件记录
def save_sent_mail_to_db(mail_entries):
    if not mail_entries:
        return
    existing_sent_mail = load_sent_mail()
    for entry in mail_entries:
        existing_sent_mail.add(entry['message_id'])
    
    try:
        with open('sent_mail.json', 'w', encoding='utf-8') as file:
            json.dump(list(existing_sent_mail), file, ensure_ascii=False, indent=4)
        logger.info(f"保存了 {len(mail_entries)} 个邮件条目到 sent_mail.json。")
    except Exception as e:
        logger.error(f"保存发送邮件到 JSON 文件时出错: {e}")

# 发送消息到 Telegram
async def send_message(text):
    try:
        MAX_MESSAGE_LENGTH = 4096
        messages = [text[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(text), MAX_MESSAGE_LENGTH)]
        
        for message_part in messages:
            try:
                # 发送消息并处理 MarkdownV2 格式
                await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message_part, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
                logger.info(f"消息以 MarkdownV2 格式成功发送: {message_part[:50]}...")
            except Exception as e:
                logger.warning(f"以 MarkdownV2 格式发送消息失败: {e}。切换到纯文本格式。")
                try:
                    # 如果 MarkdownV2 发送失败，则尝试发送纯文本格式
                    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message_part, disable_web_page_preview=True)
                    logger.info(f"消息以纯文本格式成功发送: {message_part[:50]}...")
                except Exception as e:
                    logger.error(f"即使以纯文本格式也无法发送消息: {message_part[:50]}..., 错误: {e}")
    
    except Exception as e:
        logger.error(f"发送消息到 Telegram 时出错: {e}")

# 解码邮件头
def decode_header(header):
    decoded_fragments = email.header.decode_header(header)
    return ''.join(
        fragment.decode(encoding or 'utf-8') if isinstance(fragment, bytes) else fragment
        for fragment, encoding in decoded_fragments
    )

# 清理邮件主题
def clean_subject(subject):
    """
    清理邮件主题，去除 HTML 标签、Markdown 格式标签（如 *、_）以及特殊字符和方括号 [ ]。
    """
    # 去除 HTML 标签
    subject = re.sub(r'<[^>]+>', '', subject)
    
    # 去除 Markdown 中的星号 * 和下划线 _
    subject = re.sub(r'(\*|_)+', '', subject)
    
    # 去除特殊字符和方括号
    subject = re.sub(r'[^\w\s]', '', subject).replace('[', '').replace(']', '')
    
    return subject

def sanitize_markdown_v2(text):
    """
    清理文本以适配 Telegram MarkdownV2 的要求，避免格式错误。
    """
    escape_chars = r'\\`*_{}\[\]()#+\-.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def clean_email_body(body):
    # 使用 BeautifulSoup 解析 HTML
    soup = BeautifulSoup(body, 'html.parser')
    
    # 转换链接为 MarkdownV2 格式
    for a in soup.find_all('a', href=True):
        link_text = sanitize_markdown_v2(a.get_text().strip() or a['href'])
        a.replace_with(f"[{link_text}]({sanitize_markdown_v2(a['href'])})")
    
    # 获取转换后的文本
    text = soup.get_text()
    
    # 处理连续的空行
    text = re.sub(r'\n\s*\n+', '\n', text)
    
    # 去除多余的符号
    text = re.sub(r'-{2,}', '-', text)
    text = re.sub(r'\*{2,}', '*', text)
    text = re.sub(r'—{4,}', '—' * 8, text)
    text = re.sub(r'<[^>]+>', '', text)  # 删除多余的 HTML 标签

    # 清理多余的空白
    return sanitize_markdown_v2(text.strip())

# 获取邮件正文
def get_email_body(msg):
    """
    从邮件中提取正文内容，支持多部分格式。
    """
    body = ""
    if msg.is_multipart():
        for part in msg.walk():
            content_type = part.get_content_type()
            charset = part.get_content_charset() or 'utf-8'
            
            if content_type in ['text/html', 'text/plain']:
                body = part.get_payload(decode=True).decode(charset, errors='ignore')
                break
    else:
        charset = msg.get_content_charset() or 'utf-8'
        body = msg.get_payload(decode=True).decode(charset, errors='ignore')
        
    return clean_email_body(body)

async def fetch_emails():
    sent_mail = load_sent_mail()  # 已发送的邮件集合
    new_sent_mail = []

    try:
        mail = imaplib.IMAP4_SSL(imap_server)
        mail.login(email_user, email_password)
        mail.select('inbox')

        # 搜索未读邮件
        status, messages = mail.search(None, '(UNSEEN)')
        if status != 'OK':
            logger.error("搜索未读邮件时出错")
            return

        email_ids = messages[0].split()

        for email_id in email_ids:
            try:
                # 获取邮件内容
                _, msg_data = mail.fetch(email_id, '(RFC822)')
                msg = email.message_from_bytes(msg_data[0][1])

                # 计算邮件哈希值避免重复发送
                email_hash = get_email_hash(msg)
                if email_hash in sent_mail:
                    logger.info(f"邮件哈希值 {email_hash} 已存在，跳过发送。")
                    continue

                # 解析邮件基本信息
                subject = sanitize_markdown_v2(clean_subject(decode_header(msg['subject'])))
                sender = decode_header(msg['from'])
                name, email_address = map(sanitize_markdown_v2, parseaddr(sender))

                # 获取并格式化邮件日期
                date_str = msg.get('date')
                try:
                    email_date = parsedate_to_datetime(date_str) if date_str else datetime.now()
                    email_date_bj = email_date.astimezone(pytz.timezone('Asia/Shanghai'))
                except Exception as e:
                    logger.warning(f"解析邮件日期时出错，使用当前时间: {e}")
                    email_date_bj = datetime.now(pytz.timezone('Asia/Shanghai'))

                # 获取并清理邮件正文
                body = sanitize_markdown_v2(get_email_body(msg))

                # 构建消息内容
                message = (
                    f"✉️ *{name}* <{email_address}>\n"
                    f"*主题*: {subject}\n\n"
                    f"{body}"
                )

                # 发送消息
                await send_message(message)

                # 记录已发送邮件
                new_sent_mail.append({
                    'message_id': email_hash,
                    'from_name': name,
                    'from_email': email_address,
                    'subject': subject,
                })

            except Exception as e:
                logger.error(f"处理邮件 ID {email_id} 时出错: {e}")

    except Exception as e:
        logger.error(f"获取邮件时出错: {e}")
    finally:
        try:
            mail.logout()
        except Exception as e:
            logger.error(f"登出邮件服务器时出错: {e}")

        if new_sent_mail:
            save_sent_mail_to_db(new_sent_mail)

if __name__ == '__main__':
    asyncio.run(fetch_emails())